Work plan for CSD2a final project
_________________________________


functionalities:

user input:
    - at least 2 types of irregular beat divisions (e.g. 5/4 or 7/8)
    - bpm (int)
    - which samples to use for playback (low, mid, high)
    - store generated beat (yes/no)

beat generator:
    - generate a note sequence
        - timing according to beat division with semi randomness
        - logical hits for low mid and high samples (e.g. low on downbeat)
    - generate events from note sequence and timestamps
    - play events according to bpm

midi generator:
    - convert note sequence to midi (C, D, E for low, mid , high)

after choosing wether to store the generated sequence, the program generates a new beat with the same user input



step by step:
    1. sample selection (3 samples for low, mid and high each)
    2. user input handling (error handling, store values)
    3. create 2 irregular beat divisions, divided by 16th notes:
        [
            {
                low chance: 0 - 100,
                mid chance: 0 - 100,
                high chance: 0 - 100
            },

            4 for each beat ˆˆ
        ]
    4. beat generator, assign samples to each beat according to chance, store in events list:
        [
            timestamp
            sample
        ]
    5. sort events
    7. create playback handler
    8. loop though 16ths to play events (delete event from list after it has been played,
                                         break checking loop when sample is next 16th,
                                         calculate 16th delay time according to bpm)
    9. convert sequence to midi
    10. extra's (more bars, more complex generating algorhythm)


    end: presentation about functionalities and musical use


TODO:
    - better sample selection
    - time stamp integration



TIMESTAMPS theorie
- timestamps in seconden
sum = 0
sum += time_duration


- vergelijk met zero time      startTime = time.time()

for loop met 0.001s sleep